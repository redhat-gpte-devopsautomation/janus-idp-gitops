#helm repo add backstage https://janus-idp.github.io/helm-backstage
#helm repo update
#oc project backstage
#helm install backstage backstage/backstage --values values.yaml
{% if ocp4_workload_trusted_application_pipeline_orchestrator_enabled is defined %}
    {% set orchestrator_enabled = ocp4_workload_trusted_application_pipeline_orchestrator_enabled %}
{% else %}
    {% set orchestrator_enabled = true %}
{% endif %}
{% if ocp4_workload_trusted_application_pipeline_jenkins_enabled is defined %}
    {% set jenkins_enabled = ocp4_workload_trusted_application_pipeline_jenkins_enabled %}
{% else %}
    {% set jenkins_enabled = false %}
{% endif %}

global:
  auth:
    backend:
      enabled: true
  clusterRouterBase: {{ ocp4_workload_trusted_application_pipeline_apps_domain }}
  dynamic:
    includes:
      - dynamic-plugins.default.yaml
    plugins:
      - package: ./dynamic-plugins/dist/roadiehq-backstage-plugin-security-insights
        disabled: false
      - package: ./dynamic-plugins/dist/immobiliarelabs-backstage-plugin-gitlab-backend-dynamic
        disabled: false
      - package: ./dynamic-plugins/dist/immobiliarelabs-backstage-plugin-gitlab
        disabled: false
      - package: ./dynamic-plugins/dist/backstage-plugin-catalog-backend-module-gitlab-dynamic
        disabled: false
      - package: ./dynamic-plugins/dist/backstage-plugin-scaffolder-backend-module-gitlab-dynamic
        disabled: false
      - package: ./dynamic-plugins/dist/backstage-plugin-kubernetes-backend-dynamic
        disabled: false
      - package: ./dynamic-plugins/dist/backstage-plugin-kubernetes
        disabled: false
      - package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-topology
        disabled: false
      - package: ./dynamic-plugins/dist/roadiehq-backstage-plugin-argo-cd-backend-dynamic
        disabled: false
      - package: ./dynamic-plugins/dist/roadiehq-scaffolder-backend-argocd-dynamic
        disabled: false
      - package: ./dynamic-plugins/dist/roadiehq-backstage-plugin-argo-cd
        disabled: true
      - package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-ocm
        disabled: false
      - package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-ocm-backend-dynamic
        disabled: false
      - package: ./dynamic-plugins/dist/roadiehq-scaffolder-backend-module-utils-dynamic
        disabled: false
      - package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-keycloak-backend-dynamic
        disabled: false
      - package: ./dynamic-plugins/dist/backstage-plugin-techdocs-backend-dynamic
        disabled: false
{% if jenkins_enabled %}
      - package: ./dynamic-plugins/dist/backstage-plugin-jenkins-backend-dynamic
        disabled: false
      - package: ./dynamic-plugins/dist/backstage-plugin-jenkins
        disabled: false
{% endif %}
      - package: ./dynamic-plugins/dist/backstage-plugin-techdocs
        disabled: false
      - package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-tekton
        pluginConfig:
          dynamicPlugins:
            frontend:
              janus-idp.backstage-plugin-tekton:
                mountPoints:
                  - mountPoint: entity.page.ci/cards
                    importName: TektonCI
                    config:
                      layout:
                        gridColumn: "1 / -1"
                        gridRowStart: 1
                      if:
                        allOf:
                          - isTektonCIAvailable
        disabled: false
      - package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-quay
        disabled: false
      - package: ./dynamic-plugins/dist/backstage-plugin-tech-radar
        disabled: false
      - package:  ./dynamic-plugins/dist/backstage-community-plugin-redhat-argocd
        disabled: false
{% if orchestrator_enabled %}
      - disabled: false
        package: "@redhat/backstage-plugin-orchestrator-backend-dynamic@1.2.0"
        integrity: sha512-lyw7IHuXsakTa5Pok8S2GK0imqrmXe3z+TcL7eB2sJYFqQPkCP5la1vqteL9/1EaI5eI6nKZ60WVRkPEldKBTg==
        pluginConfig:
          orchestrator:
            dataIndexService:
              url: http://sonataflow-platform-data-index-service.sonataflow-infra
      - disabled: false
        package: "@redhat/backstage-plugin-orchestrator@1.2.0"
        integrity: sha512-FhM13wVXjjF39syowc4RnMC/gKm4TRlmh8lBrMwPXAw1VzgIADI8H6WVEs837poVX/tYSqj2WhehwzFqU6PuhA==
        pluginConfig:
          dynamicPlugins:
            frontend:
              janus-idp.backstage-plugin-orchestrator:
                appIcons:
                  - importName: OrchestratorIcon
                    module: OrchestratorPlugin
                    name: orchestratorIcon
                dynamicRoutes:
                  - importName: OrchestratorPage
                    menuItem:
                      icon: orchestratorIcon
                      text: Orchestrator
                    module: OrchestratorPlugin
                    path: /orchestrator
      - disabled: false
        package: "@redhat/plugin-notifications-dynamic@1.2.0"
        integrity: sha512-1mhUl14v+x0Ta1o8Sp4KBa02izGXHd+wsiCVsDP/th6yWDFJsfSMf/DyMIn1Uhat1rQgVFRUMg8QgrvbgZCR/w==
        pluginConfig:
          dynamicPlugins:
            frontend:
              redhat.plugin-notifications:
                dynamicRoutes:
                  - importName: NotificationsPage
                    menuItem:
                      config:
                        props:
                          titleCounterEnabled: true
                          webNotificationsEnabled: false
                      importName: NotificationsSidebarItem
                    path: /notifications
      - disabled: false
        package: "@redhat/plugin-signals-dynamic@1.2.0"
        integrity: sha512-5tbZyRob0JDdrI97HXb7JqFIzNho1l7JuIkob66J+ZMAPCit+pjN1CUuPbpcglKyyIzULxq63jMBWONxcqNSXw==
        pluginConfig:
          dynamicPlugins:
            frontend:
              redhat.plugin-signals: {}
      - disabled: false
        package: "@redhat/plugin-notifications-backend-dynamic@1.2.0"
        integrity: sha512-pCFB/jZIG/Ip1wp67G0ZDJPp63E+aw66TX1rPiuSAbGSn+Mcnl8g+XlHLOMMTz+NPloHwj2/Tp4fSf59w/IOSw==
      - disabled: false
        package: "@redhat/plugin-signals-backend-dynamic@1.2.0"
        integrity: sha512-DIISzxtjeJ4a9mX3TLcuGcavRHbCtQ5b52wHn+9+uENUL2IDbFoqmB4/9BQASaKIUSFkRKLYpc5doIkrnTVyrA==
{% endif %}

upstream:
  backstage:
    image:
      registry: {{ ocp4_workload_trusted_application_pipeline_backstage_image_registry }}
      repository: {{ ocp4_workload_trusted_application_pipeline_backstage_image_repository }}
      tag: '{{ ocp4_workload_trusted_application_pipeline_backstage_image_tag }}'
      pullSecrets:
      - redhat-gpte-devhub-pull-secret
    extraEnvVars:
      - name: NODE_OPTIONS
        value: --no-node-snapshot
      - name: BACKEND_SECRET
        value: "{{ '{{ randAlphaNum 24 | b64enc }}' }}"
      - name: ORCHESTRATOR_TOKEN
        valueFrom:
          secretKeyRef:
            key: orchestrator-token
            name: backstage-orchestrator-token
      - name: 'APP_CONFIG_app_baseUrl'
        value: 'https://{{ ocp4_workload_trusted_application_pipeline_backstage_host }}'
      - name: 'APP_CONFIG_backend_baseUrl'
        value: 'https://{{ ocp4_workload_trusted_application_pipeline_backstage_host }}'
      - name: 'APP_CONFIG_backend_cors_origin'
        value: 'https://{{ ocp4_workload_trusted_application_pipeline_backstage_host }}'
      - name: POSTGRES_ADMIN_PASSWORD
        valueFrom:
          secretKeyRef:
            key: postgres-password
            name: backstage-postgresql
      - name: NODE_TLS_REJECT_UNAUTHORIZED
        value: "0"
      - name: APP_CONFIG_catalog_providers_keycloakOrg_default_baseUrl
        value: https://{{ ocp4_workload_trusted_application_pipeline_keycloak_host }}/auth
      - name: APP_CONFIG_catalog_providers_keycloakOrg_default_loginRealm
        value: backstage
      - name: APP_CONFIG_catalog_providers_keycloakOrg_default_realm
        value: backstage
      - name: APP_CONFIG_catalog_providers_keycloakOrg_default_clientId
        valueFrom:
          secretKeyRef:
            key: CLIENT_ID
            name: keycloak-client-secret-backstage
      - name: APP_CONFIG_catalog_providers_keycloakOrg_default_clientSecret
        valueFrom:
          secretKeyRef:
            key: CLIENT_SECRET
            name: keycloak-client-secret-backstage
      - name: LOG_LEVEL
        value: debug
    extraContainers:
      - name: oauth2-proxy
        env:
          - name: OAUTH2_PROXY_CLIENT_ID
            valueFrom:
              secretKeyRef:
                key: CLIENT_ID
                name: keycloak-client-secret-backstage
          - name: OAUTH2_PROXY_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                key: CLIENT_SECRET
                name: keycloak-client-secret-backstage
          - name: OAUTH2_PROXY_COOKIE_SECRET
            value: "{{ '{{ randAlpha 32 | lower | b64enc }}' }}"
          - name: OAUTH2_PROXY_OIDC_ISSUER_URL
            value: https://{{ ocp4_workload_trusted_application_pipeline_keycloak_host }}/auth/realms/backstage
          - name: OAUTH2_PROXY_SSL_INSECURE_SKIP_VERIFY
            value: 'true'
        ports:
          - name: oauth2-proxy
            containerPort: 4180
            protocol: TCP
        imagePullPolicy: IfNotPresent
        image: 'quay.io/oauth2-proxy/oauth2-proxy:latest'
        args:
          - '--provider=oidc'
          - '--email-domain=*'
          - '--upstream=http://localhost:7007'
          - '--http-address=0.0.0.0:4180'
          - '--skip-provider-button'
          - '--insecure-oidc-allow-unverified-email=true'

    appConfig:
      backend:
{% if orchestrator_enabled %}
        auth:
          externalAccess:
            - type: static
              options:
                token: ${ORCHESTRATOR_TOKEN}
                subject: orchestrator
{% endif %}
        listen:
          port: 7007
          host: 0.0.0.0
        csp:
{% if orchestrator_enabled %}
          script-src: ["'self'", "'unsafe-inline'", "'unsafe-eval'"]
          script-src-elem: ["'self'", "'unsafe-inline'", "'unsafe-eval'"]
{% endif %}
          img-src: ["'self'", 'data:', 'https://api.dicebear.com', 'https://secure.gravatar.com']
          connect-src: ["'self'", 'http:', 'https:', 'data:']
        cors:
          origin: https://{{ ocp4_workload_trusted_application_pipeline_backstage_host }}
          methods: [GET, POST, PUT, DELETE]
          credentials: true
        database:
          client: pg
          connection:
            host: "${POSTGRES_HOST}"
            port: "${POSTGRES_PORT}"
            user: "${POSTGRES_USER}"
            password: "${POSTGRES_ADMIN_PASSWORD}"
        reading:
          allow:
            - host: '*.{{ ocp4_workload_trusted_application_pipeline_apps_domain }}'

      integrations:
        gitlab:
        - host: {{ ocp4_workload_trusted_application_pipeline_gitlab_host }}
          baseUrl: https://{{ ocp4_workload_trusted_application_pipeline_gitlab_host }}
          apiBaseUrl: https://{{ ocp4_workload_trusted_application_pipeline_gitlab_host }}/api/v4
          token: {{ ocp4_workload_trusted_application_pipeline_gitlab_root_token }}

      proxy:
        endpoints:
          '/quay/api':
            target: 'https://{{ ocp4_workload_trusted_application_pipeline_quay_host }}'
            headers:
              X-Requested-With: 'XMLHttpRequest'
              # Uncomment the following line to access a private Quay Repository using a token
              Authorization: 'Bearer {{ ocp4_workload_trusted_application_pipeline_quay_admin_token }}'
            changeOrigin: true
            # Change to "false" in case of using self hosted quay instance with a self-signed certificate
            secure: false
          '/developer-hub':
            target: https://{{ ocp4_workload_trusted_application_pipeline_gitlab_host }}/
            pathRewrite:
              '^/api/proxy/developer-hub/tech-radar': /gitops/janus-idp-gitops/-/raw/main/config/tech-radar.json
            changeOrigin: true
            secure: false

      quay:
        # The UI url for Quay, used to generate the link to Quay
        uiUrl: 'https://{{ ocp4_workload_trusted_application_pipeline_quay_host }}'
        
{% if jenkins_enabled %}
      jenkins:
        instances:
          - name: default
            baseUrl: {{ ocp4_workload_trusted_application_pipeline_jenkins_host }}
            username: admin
            apiKey: {{ ocp4_workload_trusted_application_pipeline_jenkins_token }}
{% endif %}

      techdocs:
        builder: 'external'
        generator:
          runIn: 'local'
        publisher:
          type: 'awsS3'
          awsS3:
            bucketName: {{ ocp4_workload_trusted_application_pipeline_minio_bucket_name }}
            region: us-east-2
            endpoint: {{ ocp4_workload_trusted_application_pipeline_minio_endpoint }}
            s3ForcePathStyle: true
            credentials:
              accessKeyId: {{ ocp4_workload_trusted_application_pipeline_minio_username }}
              secretAccessKey: {{ ocp4_workload_trusted_application_pipeline_minio_password }}

      auth:
        environment: production
        providers:
          oauth2Proxy: {}

      signInPage: oauth2Proxy

      scaffolder:
        # see https://backstage.io/docs/features/software-templates/configuration for software template options

      catalog:
        rules:
          - allow: [Domain, Component, System, API, Resource, Location, Template]
        locations:
{% for location in ocp4_workload_trusted_application_pipeline_gitlab_template_locations %}
          - target: https://{{ ocp4_workload_trusted_application_pipeline_gitlab_host }}/{{ location.group }}/{{ location.project }}/blob/{{ location.branch }}/{{ location.file }}
            type: url
            rules:
              - allow: [{{ location.rules.allow }}]
{% endfor %}
        providers:
          gitlab:
            selfHosted:
              host: {{ ocp4_workload_trusted_application_pipeline_gitlab_host }}
              schedule: # optional; same options as in TaskScheduleDefinition
                # supports cron, ISO duration, "human duration" as used in code
                frequency: { seconds: 10 }
                # supports ISO duration, "human duration" as used in code
                timeout: { seconds: 60 }
          ocm:
            default:
              name: multiclusterhub
              kubernetesPluginRef: dev-cluster-infra
              schedule: # optional; same options as in TaskScheduleDefinition
                # supports cron, ISO duration, "human duration" as used in code
                frequency: { seconds: 10 }
                # supports ISO duration, "human duration" as used in code
                timeout: { seconds: 60 }
              owner: group:rhdh

      argocd:
        appLocatorMethods:
          - type: 'config'
            instances:
              - name: main
                url: 	https://{{ ocp4_workload_trusted_application_pipeline_argocd_host }}
                username: admin
                password: {{ ocp4_workload_trusted_application_pipeline_argocd_password }}

      kubernetes:
        serviceLocatorMethod:
          type: "multiTenant"
        clusterLocatorMethods:
          - type: "config"
            clusters:
              - name: dev-cluster-infra
                url: {{ ocp4_workload_trusted_application_pipeline_ocp_api }}
                authProvider: "serviceAccount"
                skipTLSVerify: true
                serviceAccountToken: {{ ocp4_workload_trusted_application_pipeline_ocp_default_sa_token }}
        customResources:
          - group: 'tekton.dev'
            apiVersion: 'v1beta1'
            plural: 'pipelineruns'
          - group: 'tekton.dev'
            apiVersion: 'v1beta1'
            plural: 'taskruns'
          - group: 'route.openshift.io'
            apiVersion: 'v1'
            plural: 'routes'

      permission:
        enabled: false

      enabled:
        kubernetes: true
        techdocs: true
        argocd: true
        sonarqube: false
        keycloak: true
        ocm: true
        github: false
        githubOrg: false
        gitlab: true
{% if jenkins_enabled %}
        jenkins: true
{% else %}
        jenkins: false
{% endif %}
        permission: false

  postgresql:
    enabled: true
    database: backstage
    postgresqlDataDir: /var/lib/pgsql/data/userdata
    auth:
      username: postgres
      database: backstage
      existingSecret: backstage-postgresql
      secretKeys:
        userPasswordKey: postgres-password
    image:
      registry: registry.redhat.io
      repository: rhel9/postgresql-13
      tag: 1-73
    primary:
      securityContext:
        enabled: false
      podSecurityContext:
        enabled: false
      containerSecurityContext:
        enabled: false
      persistence:
        enabled: true
        mountPath: /var/lib/pgsql/data
      extraEnvVars:
        - name: POSTGRESQL_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgres-password
              name: backstage-postgresql
  service:
    ports:
      backend: 4180
      targetPort: oauth2-proxy

route:
  enabled: true
  host: {{ ocp4_workload_trusted_application_pipeline_backstage_host }}
  tls:
    enabled: true
    termination: "edge"
